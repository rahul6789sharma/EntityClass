<!DOCTYPE html>
<html lang="en-us">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

		<meta property="og:site_name" content="www.entityclass.in" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="website" />
<meta name="author" content="entityclass.in">

<meta property="og:title" content="Rest Tutorial | Jersey | RestEsy| JAX-RS"/>

<meta property="og:url" content="http://www.entityclass.in/rest/jaxRsAnnotationPath.htm" />
<meta property="og:description" content="Using Jersey create restful hello world  restful web service"/>
    
    <title>JAX-RS</title>


    <meta name="keywords" content="Entity Class, REST tutorial, Beginner REST tutorial, JERSEY Example, REST-RS (Jersey), JAX-RS" />
    <meta name="description" content="Using Jersey create restful hello world  restful web service " />
    <meta name="robots" content="index, follow">

    <!-- Bootstrap Core CSS -->
    <link rel="stylesheet" href="../css/bootstrap.css">
    <link rel="stylesheet" href="../css/style.css">
    <link rel="shortcut icon" href="../img/EcLogo.png">
	    <script type="text/javascript" src="../js/shCore.js"></script>
    <script type="text/javascript" src="../js/shBrushJava.js"></script>
    <script type="text/javascript" src="../js/shBrushXml.js"></script>
    <link type="text/css" rel="stylesheet" href="../css/shCoreDefault.css" />
    <script type="text/javascript">
        SyntaxHighlighter.all();

    </script>
  <script src="../js/jquery.min.js"></script>
  <script src="../js/entityClass.js"></script>


</head>

<body ng-app="">

    <div style="margin-bottom:5%;">
        <div ng-include="'../pages/header.htm'"></div>
    </div>


    <div class="container-fluid" style="padding-right:0px; padding-left:0px">

        <!--left-->
        <div class="col-xs-12 col-sm-3 col-md-3 " style="padding-left:4px ; padding-right:2px">
            <div class="panel-group">
                <div class="panel panel-default">

                    <div class="panel-heading"><strong>REST</strong></div>
                    <div class="panel-body">

                       
                           	<div id="leftMenu">						
					         </div>
             
                    </div>



                </div>


            </div>
            <div ng-include="'../pages/fb.htm'"></div>


            <hr>

        </div>
        <!--/left-->

        <!--center-->
        <div class="col-xs-12 col-sm-6  col-md-6" style="padding-left:2px ; padding-right:2px ">
            <div class="row">
                <div class="col-xs-12">
                    <div class="panel panel-default">

                        <div class="panel-body">
                           
						       <div class="mainParaHeding"> JAX-RS - Annotations @Path and @PathParam Example</div>
                            <h1 style="display: none;"> JAX-RS - Annotations @Path and @PathParam Examples</h1>
                            <hr class="mainHeading">
							 <p>
                                The JAX-RS <strong>@Path</strong> annotation's value is a relative URI path of the resource. This can be applied to method of class. This makes JAX-RS so useful that you can embed variables in the URIs.
                            </p>
                            </br>

                            <p>
                                <strong>1.@path Annotation : URI Matching </strong>
                            </p>

                            <p>@javax.ws.rs.Path annotation is used to define resource URI on which the method will be invoked. It can be placed upon a class or on one or more Java methods. For a Java class to be eligible to receive any HTTP requests, the class must be annotated with at least the @Path("/") expression. These types of classes are called JAX-RS root resources
                            </p>
                            <p>

                                To receive a request, a Java method must have at least an HTTP method annotation like @javax.ws.rs.GET applied to it. This method is not required to have an @Path annotation on it
                            </p>
                            <div class="command">
                                <pre class="brush: java; gutter: false;" style=" overflow-y: hidden !important; ">

@Path("/hello")
public class HelloRestService {

	@GET
	public Response getHello() {

		String output = " Hello Welcome  ";
		return Response.status(200).entity(output).build();
	}

	@GET
	@Path("/message")
	public Response getHelloMsg() {

		String output = "Hello Welcome by message Rest Default";
		return Response.status(200).entity(output).build();
	}
}

</pre>

                            </div>

                            <p>
                                <p>URI pattern :<strong> '/hello'	</strong> </p>
                                <p>An HTTP request of GET '/hello' would dispatch to the getHello() method.</p>
                                <div class="command">
                                    Hello Welcome
                                </div>
                            </p>

                            </br>
                            <p>
                                <p>URI pattern :<strong> '/hello/message'	</strong> </p>
                                <p>@Path can also be applied to your Java method. If you do this, the URI matching pattern is a concatenation of the class's @Path expression and that of the method's</p>
                                <p>An HTTP request of GET '/hello/message' would dispatch to the getHelloMsg() method.</p>
                                <div class="command">
                                    Hello Welcome by message Rest Default
                                </div>
                            </p>

                            </br>


                            <p>
                                <strong>2.@PathParam Annotation : URI Matching and Parameter</strong>
                            </p>

                            <p>@javax.ws.rs.PathParam annotation is used to get the parameter from @path annotation and use inside method argument. The value within an open brace '{' and close brace '}', is represents a parameter, and can be access with @PathParam.
                            </p>

                            </br>

                            <div class="command">
                                <pre class="brush: java; gutter: false;" style=" overflow-y: hidden !important; ">

@Path("/hello")
public class HelloRestService {

	@GET
	@Path("{myMsg}")
	public Response getMyMsg(@PathParam("myMsg") String myMsg) {

		String output = "Hello Welcome by Rest :  " + myMsg;
		return Response.status(200).entity(output).build();
	}

	@GET
	@Path("/message/{myMsg}")
	public Response getMySecondMsg(@PathParam("myMsg") String myMsg) {

		String output = "Hello Welcome by message Rest :  " + myMsg;
		return Response.status(200).entity(output).build();
	}
}

</pre>

                            </div>

                            <p>
                                <p>URI pattern :<strong> '/hello/MyMessageGoesHere'	</strong> </p>
                                <p>An HTTP request of GET '/hello/MyMessageGoesHere' would dispatch to the getMyMsg() method.</p>
                                <p>using "@PathParam("myMsg") String myMsg" we can pass 'myMsg' as method argument</p>
                                <div class="command">
                                    Hello Welcome by Rest : MyMessageGoesHere
                                </div>
                            </p>
                            </br>
                            <p>
                                <p>URI pattern :<strong> '/hello/message/MyMessageGoesHere'	</strong> </p>
                                <p>An HTTP request of GET '/hello/message/MyMessageGoesHere' would dispatch to the getMySecondMsg() method.</p>

                                <div class="command">
                                    Hello Welcome by message Rest : : MyMessageGoesHere
                                </div>
                            </p>
							
							
							<p><strong>Download This Project</strong></p>
                                    <p> You can import the Rest Project as maven project in eclipse.
                                    </p>
                                    <p> or you can directly use maven commend to build the war file and deploy on tomcat server.
                                    </p>
                                    <p>Go to project directory "RestURIPath" and run mvn commend as: this will create target folder and generate war file</p>
                                    <p>
                                        <div class="command">
                                            mvn clean install
                                        </div>
                                    </p>
                                    <a target="_self" href="../SampleCodes/RestDemo/RestURIPath.zip">
                                        <button type="button" class="btn btn-success">
                                            <span class="glyphicon glyphicon-download-alt">
		  </span> &nbsp; &nbsp; RestURIPath.zip &nbsp; &nbsp;
                                        </button>
                                    </a>


                             <p>
                                <ul class="pager">
                                    <li class="previous"><a href="RestEasyHelloWorld.htm">Previous</a></li>
                                    <li class="next"><a href="RestEasyHelloWorld.htm">Next</a></li>
                                </ul>
                            </p>



                        </div>
                    </div>
                </div>
            </div>
			
            <hr>

            <div id="disqus_thread"></div>
            <script>
                /**
                 * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
                 * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
                 */

                var disqus_config = function() {
                    this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable
                    this.page.identifier = 4; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
                };

                (function() { // DON'T EDIT BELOW THIS LINE
                    var d = document,
                        s = d.createElement('script');

                    s.src = '//entityclass.disqus.com/embed.js';

                    s.setAttribute('data-timestamp', +new Date());
                    (d.head || d.body).appendChild(s);
                })();

            </script>

            <hr>

        </div>
        <!--/center-->

        <!--right-->
        <div class="col-xs-5 col-sm-3  col-md-3" style="padding-left:2px ; padding-right:2px">
            <div>
               <div ng-include="'../pages/rightPannel.htm'"></div>

            </div>
        </div>
        <!--/right-->
      
    </div>
    <!--/container-fluid-->

    <div id="footer">
        <div ng-include="'../pages/footer.html'"></div>
    </div>

    <!-- Bootstrap Core JavaScript -->

  
    <script src="../js/bootstrap.js"></script>
    <script src="../js/angular.min.js"></script>
    <script src="../js/myNoteApp.js"></script>
    <script src="../js/myNoteCtrl.js"></script>




</body>

</html>
